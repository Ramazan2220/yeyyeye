import os
import tempfile
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import ConversationHandler

from database.db_manager import get_instagram_account, get_instagram_accounts, create_publish_task
from instagram_api.publisher import publish_video

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
CHOOSE_ACCOUNT, ENTER_CAPTION, CONFIRM_PUBLISH, CHOOSE_SCHEDULE = range(10, 14)

def is_admin(user_id):
    from telegram_bot.bot import is_admin
    return is_admin(user_id)

def publish_now_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    accounts = get_instagram_accounts()

    if not accounts:
        keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data='add_account')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Instagram. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.",
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    keyboard = []
    for account in accounts:
        if account.is_active:
            keyboard.append([InlineKeyboardButton(f"üë§ {account.username}", callback_data=f"publish_account_{account.id}")])

    keyboard.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='cancel_publish')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        query = update.callback_query
        query.answer()
        query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=reply_markup
        )
    else:
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=reply_markup
        )

    return CHOOSE_ACCOUNT

def choose_account_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data
    account_id = int(query.data.split('_')[-1])
    context.user_data['publish_account_id'] = account_id

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    account = get_instagram_account(account_id)
    context.user_data['publish_account_username'] = account.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª
    if 'publish_media_path' in context.user_data:
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–¥–ø–∏—Å–∏
        query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *{account.username}*\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):",
            parse_mode=ParseMode.MARKDOWN
        )
        return ENTER_CAPTION
    else:
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
        query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *{account.username}*\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            parse_mode=ParseMode.MARKDOWN
        )
        return ConversationHandler.END

def video_upload_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
    if 'publish_account_id' not in context.user_data:
        # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        # Store the video file information for later use
        context.user_data['pending_video'] = update.message.video or update.message.document
        return publish_now_handler(update, context)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    video_file = update.message.video or update.message.document
    file_id = video_file.file_id

    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    video = context.bot.get_file(file_id)

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
    with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as temp_file:
        video_path = temp_file.name

    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    video.download(video_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ
    context.user_data['publish_media_path'] = video_path
    context.user_data['publish_media_type'] = 'video'

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    update.message.reply_text(
        "–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):"
    )

    return ENTER_CAPTION

def enter_caption(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    if update.message.text == '/skip':
        context.user_data['publish_caption'] = ""
    else:
        context.user_data['publish_caption'] = update.message.text

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    account_id = context.user_data.get('publish_account_id')
    account_username = context.user_data.get('publish_account_username')
    media_type = context.user_data.get('publish_media_type')
    caption = context.user_data.get('publish_caption')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data='confirm_publish_now'),
            InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data='schedule_publish')
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_publish')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        f"*–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:*\n\n"
        f"üë§ *–ê–∫–∫–∞—É–Ω—Ç:* {account_username}\n"
        f"üìù *–¢–∏–ø:* {media_type}\n"
        f"‚úèÔ∏è *–ü–æ–¥–ø–∏—Å—å:* {caption or '(–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)'}\n\n"
        f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

    return CONFIRM_PUBLISH

def confirm_publish_now(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    account_id = context.user_data.get('publish_account_id')
    media_path = context.user_data.get('publish_media_path')
    media_type = context.user_data.get('publish_media_type')
    caption = context.user_data.get('publish_caption', '')

    query.edit_message_text("‚è≥ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
    success, task_id = create_publish_task(
        account_id=account_id,
        task_type=media_type,
        media_path=media_path,
        caption=caption
    )

    if not success:
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {task_id}")
        return ConversationHandler.END

    # –ü—É–±–ª–∏–∫—É–µ–º –≤–∏–¥–µ–æ
    if media_type == 'video':
        success, result = publish_video(task_id)

        if success:
            keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∑–∞–¥–∞—á", callback_data='menu_tasks')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                "‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!",
                reply_markup=reply_markup
            )
        else:
            keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∑–∞–¥–∞—á", callback_data='menu_tasks')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {result}",
                reply_markup=reply_markup
            )
    else:
        query.edit_message_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if 'publish_account_id' in context.user_data:
        del context.user_data['publish_account_id']
    if 'publish_account_username' in context.user_data:
        del context.user_data['publish_account_username']
    if 'publish_media_path' in context.user_data:
        del context.user_data['publish_media_path']
    if 'publish_media_type' in context.user_data:
        del context.user_data['publish_media_type']
    if 'publish_caption' in context.user_data:
        del context.user_data['publish_caption']

    return ConversationHandler.END

def schedule_publish_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2023 15:30"
    )

    return CHOOSE_SCHEDULE

def choose_schedule(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        scheduled_time = datetime.strptime(update.message.text, "%d.%m.%Y %H:%M")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        account_id = context.user_data.get('publish_account_id')
        media_path = context.user_data.get('publish_media_path')
        media_type = context.user_data.get('publish_media_type')
        caption = context.user_data.get('publish_caption', '')

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        success, task_id = create_publish_task(
            account_id=account_id,
            task_type=media_type,
            media_path=media_path,
            caption=caption,
            scheduled_time=scheduled_time
        )

        if not success:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {task_id}")
            return ConversationHandler.END

        keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∑–∞–¥–∞—á", callback_data='menu_tasks')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_time.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=reply_markup
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if 'publish_account_id' in context.user_data:
            del context.user_data['publish_account_id']
        if 'publish_account_username' in context.user_data:
            del context.user_data['publish_account_username']
        if 'publish_media_path' in context.user_data:
            del context.user_data['publish_media_path']
        if 'publish_media_type' in context.user_data:
            del context.user_data['publish_media_type']
        if 'publish_caption' in context.user_data:
            del context.user_data['publish_caption']

    except ValueError:
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2023 15:30"
        )
        return CHOOSE_SCHEDULE

    return ConversationHandler.END

def cancel_publish(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if 'publish_account_id' in context.user_data:
        del context.user_data['publish_account_id']
    if 'publish_account_username' in context.user_data:
        del context.user_data['publish_account_username']
    if 'publish_media_path' in context.user_data:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(context.user_data['publish_media_path'])
        except:
            pass
        del context.user_data['publish_media_path']
    if 'publish_media_type' in context.user_data:
        del context.user_data['publish_media_type']
    if 'publish_caption' in context.user_data:
        del context.user_data['publish_caption']

    keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∑–∞–¥–∞—á", callback_data='menu_tasks')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(
        "‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=reply_markup
    )

    return ConversationHandler.END

def get_publish_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, Filters

    publish_conversation = ConversationHandler(
        entry_points=[
            CommandHandler("publish_now", publish_now_handler),
            CallbackQueryHandler(publish_now_handler, pattern='^publish_now$')
        ],
        states={
            CHOOSE_ACCOUNT: [
                CallbackQueryHandler(choose_account_callback, pattern='^publish_account_\d+$'),
                CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
            ],
            ENTER_CAPTION: [
                MessageHandler(Filters.text & ~Filters.command, enter_caption),
                CommandHandler("skip", enter_caption)
            ],
            CONFIRM_PUBLISH: [
                CallbackQueryHandler(confirm_publish_now, pattern='^confirm_publish_now$'),
                CallbackQueryHandler(schedule_publish_callback, pattern='^schedule_publish$'),
                CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
            ],
            CHOOSE_SCHEDULE: [
                MessageHandler(Filters.text & ~Filters.command, choose_schedule)
            ]
        },
        fallbacks=[CommandHandler("cancel", lambda update, context: ConversationHandler.END)]
    )

    video_handler = MessageHandler(Filters.video | Filters.document.video, video_upload_handler)

    return [publish_conversation, video_handler]